net {
  type = mainnet
  # type = testnet
}

storage {
  # Directory for storing persistent data
  db.version = 2,
  db.directory = "database",
  index.directory = "index",
  
  # This configuration item is only for SolidityNode.
  # Turn off the index is "off", else "on".
  # Turning off the index will significantly improve the performance of the SolidityNode sync block.
  # You can turn off the index if you don't use the two interfaces getTransactionsToThis and getTransactionsFromThis.
  index.switch = "on"
  
  # This configuration item is used to database write strategy.
  # Synchronous writing is "true", else Asynchronous writing is "false".
  # Asynchronous writing significantly improves the performance of the FullNode sync block.
  # 1. If asynchronous, the write will be flushed from the operating system buffer cache.
  #    the machine crashes, some recent writes may be lost. Note that if it is just the process that
  #    crashes (i.e., the machine does not reboot), no writes will be lost;
  # 2. If synchronous, writes will be flush into leveldb directly.
  #     No writes will be lost when machine crashes, but it is slow.
  db.sync = false,
  
  # This configuration item controls the transaction result be put into transactionHistory database.
  # Turn off the switch is "off", else "on".
  # Turning off the switch, transaction result will not be put into transactionHistory database;
  # You can turn off the switch if you don't use the interface getransactioninfobyid.
  transHistory.switch = "on",
  

  # You can custom these 14 databases' configs:

  # account, account-index, asset-issue, block, block-index,
  # block_KDB, peers, properties, recent-block, trans,
  # utxo, votes, witness, witness_schedule.

  # Otherwise, db configs will remain defualt and data will be stored in
  # the path of "output-directory" or which is set by "-d" ("--output-directory").

  # Attention: name is a required field that must be set !!!
  properties = [
//    {
//      name = "account",
//      path = "storage_directory_test",
//      createIfMissing = true,
//      paranoidChecks = true,
//      verifyChecksums = true,
    //      compressionType = 1,        // compressed with snappy
    //      blockSize = 4096,           // 4  KB =         4 * 1024 B
    //      writeBufferSize = 10485760, // 10 MB = 10 * 1024 * 1024 B
    //      cacheSize = 10485760,       // 10 MB = 10 * 1024 * 1024 B
    //      maxOpenFiles = 100
    //    },
//    {
//      name = "account-index",
//      path = "storage_directory_test",
//      createIfMissing = true,
//      paranoidChecks = true,
//      verifyChecksums = true,
    //      compressionType = 1,        // compressed with snappy
    //      blockSize = 4096,           // 4  KB =         4 * 1024 B
    //      writeBufferSize = 10485760, // 10 MB = 10 * 1024 * 1024 B
    //      cacheSize = 10485760,       // 10 MB = 10 * 1024 * 1024 B
    //      maxOpenFiles = 100
    //    },
  ]

}

node.discovery = {
  enable = true
  persist = true
  bind.ip = ""
  external.ip = null
}

node.backup {
  port = 10001
  priority = 8
  members = [
  ]
}

node {
  # trust node for solidity node
  # trustNode = "ip:port"
  trustNode = "127.0.0.1:50051"

  # expose extension api to public or not
  walletExtensionApi = true

  listen.port = 18888

  connection.timeout = 2

  tcpNettyWorkThreadNum = 0

  udpNettyWorkThreadNum = 1

  # Number of validate sign thread, default availableProcessors / 2
  # validateSignThreadNum = 16

  connectFactor = 0.3
  activeConnectFactor = 0.1

  maxActiveNodes = 30

  maxActiveNodesWithSameIp = 2

  minParticipationRate = 15

  # check the peer data transfer ,disconnect factor
  disconnectNumberFactor = 0.4
  maxConnectNumberFactor = 0.8
  receiveTcpMinDataLength = 2048
  isOpenFullTcpDisconnect = true

  p2p {
    version = 20181215 # 11111: mainnet; 20180622: testnet
  }

  active = [
    # Active establish connection in any case
    # Sample entries:
    # "ip:port",
    # "ip:port"
  ]

  passive = [
    # Passive accept connection in any case
    # Sample entries:
    # "ip:port",
    # "ip:port"
  ]

  http {
    fullNodePort = 8090
    solidityPort = 8091
  }

  rpc {
    port = 50051
    solidityPort = 50061
    # Number of gRPC thread, default availableProcessors / 2
    # thread = 16

    # The maximum number of concurrent calls permitted for each incoming connection
    # maxConcurrentCallsPerConnection =

    # The HTTP/2 flow control window, default 1MB
    # flowControlWindow =

    # Connection being idle for longer than which will be gracefully terminated
    maxConnectionIdleInMillis = 60000

    # Connection lasting longer than which will be gracefully terminated
    # maxConnectionAgeInMillis =

    # The maximum message size allowed to be received on the server, default 4MB
    # maxMessageSize =

    # The maximum size of header list allowed to be received, default 8192
    # maxHeaderListSize =
  }

}



seed.node = {
  # List of the seed nodes
  # Seed nodes are stable full nodes
  # example:
  # ip.list = [
  #   "ip:port",
  #   "ip:port"
  # ]
  ip.list = [
"39.96.58.159:18888",
"39.96.56.4:18888",
"39.105.194.119:18888",
"39.96.41.192:18888",
"39.96.49.213:18888",
"39.96.56.178:18888",
"123.56.3.221:18888"
  ]
}

genesis.block = {
  # Reserve balance
  assets = [
    {
      accountName = "Zion"
      accountType = "AssetIssue"
      address = "TLLM21wteSPs4hKjbxgmH1L6poyMjeTbHm"
      balance = "99000000000000000"
    },
    {
      accountName = "Sun"
      accountType = "AssetIssue"
      address = "TXmVpin5vq5gdZsciyyjdZgKRUju4st1wM"
      balance = "0"
    },
    {
      accountName = "Blackhole"
      accountType = "AssetIssue"
      address = "TLsV52sRDL79HXGGm9yzwKibb6BeruhUzy"
      balance = "-9223372036854775808"
    }
  ]

witnesses = [
    {
      address: TRx2rc1v91HjUFdeBBgNSiqirctq94sAfA,
      url = "http://GR1.com",
      voteCount = 100000026
    },
    {
      address: TRxETQim3Jn5TYqLeAnpyF5XdQeg7NUcSJ,
      url = "http://GR2.com",
      voteCount = 100000025
    },
    {
      address: TRxUu1ZhEYsZw9AHyg8gXBmRSmUzaZPWaw,
      url = "http://GR3.com",
      voteCount = 100000024
    },
    {
      address: TRxgBU7HFTQvU6zPheLHphqpwhDKNxB6Rk,
      url = "http://GR4.com",
      voteCount = 100000023
    },
    {
      address: TRxscEvPTPFaCxBMuFVmzEybzZWJZM9eAB,
      url = "http://GR5.com",
      voteCount = 100000022
    },
    {
      address: TRx32uh7TQjdnLFKyWVPKJBfEn1XWjJtcm,
      url = "http://GR6.com",
      voteCount = 100000021
    },
    {
      address: TRxF8fZERk4XzQZe1SzvkS5nyNJ7x6tGZ5,
      url = "http://GR27.com",
      voteCount = 100000000
    }
]

  timestamp = "0" #2017-8-26 12:00:00

  parentHash = "0xe58f33f9baf9305dc6f82b9f1934ea8f0ade2defb951258d50167028c780351f"
}

localwitness = [
]

#localwitnesskeystore = [
#  "localwitnesskeystore.json"
#]

block = {
  needSyncCheck = true
  maintenanceTimeInterval = 21600000
  proposalExpireTime = 259200000 // 3 day: 259200000(ms)
}

# Transaction reference block, default is "head", configure to "solid" can avoid TaPos error
trx.reference.block = "head" // head;solid;

vm = {
  supportConstant = false
  minTimeRatio = 0.0
  maxTimeRatio = 5.0
  saveInternalTx = false
}

committee = {
  allowCreationOfContracts = 0  //mainnet:0 (reset by committee),test:1
}

log.level = {
   root = "INFO" // TRACE;DEBUG;INFO;WARN;ERROR
}
